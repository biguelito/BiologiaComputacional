import streamlit as st

# --- Configura√ß√£o da P√°gina ---
# st.set_page_config deve ser o primeiro comando Streamlit a ser executado
st.set_page_config(
    page_title="Alinhamento Global de Sequ√™ncias",
    page_icon="üß¨"
)

# --- T√≠tulo e Introdu√ß√£o ---
st.title("Alinhamento Global pelo Algoritmo de Needleman-Wunsch")

st.markdown("""
Esta aplica√ß√£o demonstra a implementa√ß√£o do algoritmo de Needleman-Wunsch (1970),
um m√©todo can√¥nico para realizar o alinhamento global de sequ√™ncias.
""")

st.markdown("""
Utilize o menu na barra lateral para navegar at√© a p√°gina de alinhamento
e executar a ferramenta.
""")


# --- Fundamenta√ß√£o Te√≥rica ---
st.header("Fundamentos do Alinhamento Global")
st.markdown("""
O alinhamento global busca determinar a correspond√™ncia √≥tima entre duas sequ√™ncias
(por exemplo, nucleot√≠deos ou amino√°cidos) considerando-as em toda a sua extens√£o.
O objetivo √© maximizar uma pontua√ß√£o de similaridade, que √© calculada com base em
um sistema de pontua√ß√£o pr√©-definido, penalizando desalinhamentos (mismatches)
e a introdu√ß√£o de lacunas (gaps).

Este m√©todo √© fundamental em bioinform√°tica para inferir homologia funcional
ou evolutiva entre sequ√™ncias.
""")

st.header("O Algoritmo de Needleman-Wunsch")
st.markdown("""
O algoritmo de Needleman-Wunsch resolve o problema do alinhamento global
utilizando **programa√ß√£o din√¢mica**. O processo √© dividido em duas fases:

1.  **Constru√ß√£o da Matriz de Pontua√ß√£o (DP)**
2.  **Rastreamento (Backtracking)**
""")

# --- Detalhes do Algoritmo ---
st.subheader("1. Constru√ß√£o da Matriz")
st.markdown("""
Dadas duas sequ√™ncias, $S_1$ de comprimento $m$ e $S_2$ de comprimento $n$,
uma matriz (ou tabela) $F$ de dimens√µes $(m+1) \times (n+1)$ √© constru√≠da.
Cada c√©lula $F(i, j)$ armazena a pontua√ß√£o m√°xima do alinhamento
√≥timo entre o prefixo $S_1[1..i]$ e o prefixo $S_2[1..j]$.

A matriz √© inicializada com as penalidades de gap:
* $F(i, 0) = i \times d$
* $F(0, j) = j \times d$
(Onde $d$ √© a penalidade de gap, geralmente um valor negativo).

As demais c√©lulas s√£o preenchidas com base na seguinte **f√≥rmula de recorr√™ncia**:
""")

st.latex(r'''
F(i, j) = \max \begin{cases}
F(i-1, j-1) + S(S_1[i], S_2[j]) & \text{(Match ou Mismatch)} \\
F(i-1, j) + d & \text{(Gap em } S_2 \text{)} \\
F(i, j-1) + d & \text{(Gap em } S_1 \text{)}
\end{cases}
''')

st.markdown("""
Onde $S(a, b)$ √© a pontua√ß√£o para um *match* (se $a = b$) ou *mismatch*
(se $a \neq b$), e $d$ √© a penalidade de gap linear.

A pontua√ß√£o final do alinhamento √≥timo √© o valor encontrado na c√©lula
$F(m, n)$.
""")

st.subheader("2. Rastreamento (Backtracking)")
st.markdown("""
Ap√≥s o preenchimento completo da matriz, o alinhamento √≥timo √© reconstru√≠do.
O processo inicia na c√©lula $F(m, n)$ e tra√ßa um caminho de volta √† origem
$F(0, 0)$.

A cada passo, o algoritmo verifica qual das tr√™s possibilidades na f√≥rmula
de recorr√™ncia gerou o valor da c√©lula atual:
* **Movimento Diagonal:** $F(i-1, j-1)$ foi usado. Isso corresponde a um
    *match* ou *mismatch* (ambos $S_1[i]$ e $S_2[j]$ s√£o alinhados).
* **Movimento Vertical:** $F(i-1, j)$ foi usado. Isso corresponde a um
    gap na sequ√™ncia $S_2$ (alinhando $S_1[i]$ com '$-$' ).
* **Movimento Horizontal:** $F(i, j-1)$ foi usado. Isso corresponde a um
    gap na sequ√™ncia $S_1$ (alinhando $S_2[j]$ com '$-$' ).

O caminho tra√ßado, lido do in√≠cio ao fim, revela o alinhamento global.
""")